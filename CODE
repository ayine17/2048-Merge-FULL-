#http://www.codeskulptor.org/#user40_9TeyNm8ZdG_85.py

"""
Clone of 2048 game.
"""

import poc_2048_gui
import random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

#new_list = [] # define temp list to in while loop
# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    # replace with your code from the previous mini-project
    zeros = []                                    
    non_zeros = []
    # this code slid over non-zero tiles to the beginning of the list 
    # and zero to end of the list
    
    for index in range(len(list(line))):
        if line[index]  <> 0:
            non_zeros.append(line[index])
        else:
            zeros.append(line[index])
        
    non_zeros.extend(zeros)
    new_list = list(non_zeros)
   
    
    #create another new list in which pairs of tiles in the first list
    #are replaced with a tile of twice the value and a zero tile.
    
    for index  in range(len(list(non_zeros))-1):
        if new_list[index ] <> 0  and new_list[index ] == new_list[index +1]  :
            
            new_list[index ] = new_list[index]*2
            new_list[index +1] = 0
          
            new_list.append(0)
            new_list.remove(new_list[index +1])
          
        
    return new_list
   
def change_list(new_list,list_width):
        """
        a function to change 1X 16 list to 4 X 4 demisional list
        """
        before_merge =[]
        index = 0
        
        while index<len(new_list):
            before_merge.append(new_list[index:index+list_width])
            index+=list_width
        return before_merge
class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        
        # Initialize class argrument
        self._grid_height = grid_height
        self._grid_width = grid_width
        
        self._grid  = [[0 for dummy_col in range(self._grid_width)] 
                      for dummy_row in range(self._grid_height)]
        self._grid =[[0, 0, 0, 8, 2], [0, 0, 0, 0, 2], [0, 2, 0, 0, 0], [0, 0, 0, 2, 4]]
        self._initial_list = {UP:[(0,index) for index in range(self.get_grid_width())],
                        DOWN:[(self._grid_height - 1,index) for index in range(self.get_grid_width())],
                        LEFT:[(index,0) for index in range(self.get_grid_height())],
                        RIGHT:[(index,self._grid_width-1) for index in range(self.get_grid_height())]
                        }
       
    

        self.reset()
       
    
    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        
        # replace with your code
        self._grid  = [[0 for dummy_col in range(self.get_grid_width())] 
                      for dummy_row in range(self.get_grid_height())]
       
        self.new_tile()
        self.new_tile()
       
    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        # replace with your code
        
        
        return "["+' \n '.join(map(str, self._grid)) +"]"
        
         
        
    def get_grid_height(self):
        """
        Get the height of the board.
        """
        
        return self._grid_height 

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        # replace with your code
        return self._grid_width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
       
        new_list = []
        list_copy = self._initial_list[direction]
        
        temp_list = [] # create temp list to hold list for merge
        if direction == UP or direction == DOWN:
           
            iterator = self.get_grid_height()
        elif direction == LEFT or direction == RIGHT:
            iterator = self.get_grid_width()
        

        for index in list_copy:
            
            element = list(index)
            temp_list.append(index)
            new_list.append(self.get_tile(element[0],element[1]))
            
            
            for  dummy_indexer in range(1,iterator):
                 
                element[0] += OFFSETS[direction][0]
                element[1] += OFFSETS[direction][1]
                if (element) not in temp_list:
                    temp_list.append(tuple(element))
                    new_list.append(self.get_tile(element[0],element[1]))
        #indexer += 1
                
        
        before_merge = [] # hold before merge list
        # call the cha nge function conve   rt to multi-demisional lists
        index_merge = []
        index_merge = change_list(temp_list,iterator)
        before_merge = change_list(new_list,iterator)
       
        after_merge = [] # list to hold after merge list 
        for index in before_merge:
            
            after_merge.append(merge(index))
        
        for index,index_list in zip(after_merge, index_merge):
            for list_index,value in zip(index_list,index):  
                self.set_tile(list_index[0], list_index[1], value)
               
        if after_merge != before_merge:
            self.new_tile()
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        # replace with your code
        zero_tiles = []
        randow_zero_tile = ()
        choices = [2, 2, 2, 2, 2, 2, 2, 2,4]
        for row in range((self.get_grid_height())):
            for col in range((self.get_grid_width())):
                #print row,col,self.get_grid_height(),self.get_grid_width()
                #print self._grid
                if self._grid[row][col] == 0:
                    zero_tiles.append((row,col))
        if len(zero_tiles):
            randow_zero_tile = random.choice(zero_tiles)
            
            value = random.choice(choices)
            self.set_tile(randow_zero_tile[0], randow_zero_tile[1],value)
    def set_tile(self, row, col,value):
        """
        Set the tile at position row, col to have the given value.
        """
        # replace with your code
        
        self._grid[row][col]= value
        self.__str__()
        return self._grid
        
    def get_tile(self, row, col):
        """ 
        Return the value of the tile at position row, col.
        """
        # replace with your code
        
       
        return self._grid[row][col]
        

poc_2048_gui.run_gui(TwentyFortyEight(4, 4))



